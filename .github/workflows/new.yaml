name: Build and Release APK

on:
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      java-path: ${{ steps.set-env.outputs.JAVA_HOME }}
      android-path: ${{ steps.set-env.outputs.ANDROID_HOME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache Android build tools
        uses: actions/cache@v2
        with:
          path: |
            /usr/local/lib/android/sdk/build-tools
          key: ${{ runner.os }}-build-tools-${{ hashFiles('**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-build-tools-

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2

      - name: Install Android build tools
        run: |
          echo "Checking ANDROID_HOME: ${ANDROID_HOME}"
          if [ ! -d "/usr/local/lib/android/sdk/build-tools/30.0.3" ]; then
            echo "y" | sudo ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --install "build-tools;30.0.3"
          fi
          echo "Installed build tools at /usr/local/lib/android/sdk/build-tools/30.0.3"

      - name: Set up environment variables
        id: set-env
        run: |
          echo "JAVA_HOME=$(dirname $(dirname $(readlink -f $(which javac))))" >> $GITHUB_ENV
          echo "ANDROID_HOME=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          echo "::set-output name=JAVA_HOME::$(dirname $(dirname $(readlink -f $(which javac))))"
          echo "::set-output name=ANDROID_HOME::/usr/local/lib/android/sdk"

  verify:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Verify paths
        run: |
          echo "Checking GITHUB_WORKSPACE: ${GITHUB_WORKSPACE}"
          if [ -d "${GITHUB_WORKSPACE}/tools" ]; then
            cd ${GITHUB_WORKSPACE}/tools || exit 1
            if [ -f "apkc" ]; then
              chmod +x apkc || exit 1
              ./apkc doctor || exit 1
            else
              echo "apkc tool not found in tools directory"
              exit 1
            fi
          else
            echo "tools directory not found in GITHUB_WORKSPACE"
            exit 1
          fi

  build:
    needs: verify
    runs-on: ubuntu-latest
    steps:
      - name: Generate Keystore
        run: |
          keytool -genkey -v -keystore /home/runner/.android/debug.keystore -alias androiddebugkey -keyalg RSA -keysize 2048 -validity 10000 -storepass android -keypass android -dname "CN=Android Debug,O=Android,C=US"

      - name: Build APK
        run: |
          echo "Checking GITHUB_WORKSPACE: ${GITHUB_WORKSPACE}"
          if [ -d "${GITHUB_WORKSPACE}/src" ]; then
            chmod -R 777 ${GITHUB_WORKSPACE}/src || exit 1
            cd ${GITHUB_WORKSPACE}/src && ${GITHUB_WORKSPACE}/tools/apkc build --keystore "/home/runner/.android/debug.keystore" --storepass "android" --keyalias "androiddebugkey" || exit 1
          else
            echo "src directory not found in GITHUB_WORKSPACE"
            exit 1
          fi

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_id }}
          release_name: Release ${{ github.run_id }}
          draft: false
          prerelease: false

      - name: Upload APK to GitHub Releases
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ github.workspace }}/src/build/app-release.apk
          asset_name: app-release-${{ github.run_id }}.apk
          asset_content_type: application/vnd.android.package-archive
